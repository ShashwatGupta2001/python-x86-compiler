Graph {
node1 [label="continued_file_input ()"];
node2 [label="continued_file_input ()"];
node3 [label="continued_file_input ()"];
node4 [label="continued_file_input ()"];
node5 [label="continued_file_input ()"];
node6 [label="continued_file_input ()"];
node7 [label="continued_file_input ()"];
node8 [label="continued_file_input ()"];
node9 [label="continued_file_input ()"];
node10 [label="continued_file_input ()"];
node11 [label="continued_file_input (=)"];
node12 [label="testlist_star_expr (ascii_bytes)"];
node13 [label="testlist_star_expr (b'Hello, World!')"];
node14 [label="simple_stmt ()"];
node15 [label="NAME (print)"];
node16 [label="trailers (ascii_bytes)"];
node17 [label="for_stmt (for$in)"];
node18 [label="exprlist (byte)"];
node19 [label="testlist (ascii_bytes)"];
node20 [label="suite ()"];
node21 [label="NAME (print)"];
node22 [label="trailers ()"];
node23 [label="test (byte)"];
node24 [label="argument (=)"];
node25 [label="test (end)"];
node26 [label="test (' ')"];
node27 [label="simple_stmt ()"];
node28 [label="NAME (print)"];
node29 [label="trailers ( () )"];
node30 [label="simple_stmt (=)"];
node31 [label="testlist_star_expr (hex_bytes)"];
node32 [label="testlist_star_expr (b'\x48\x65\x6c\x6c\x6f\x2c\x20\x57\x6f\x72\x6c\x64\x21')"];
node33 [label="simple_stmt ()"];
node34 [label="NAME (print)"];
node35 [label="trailers (hex_bytes)"];
node36 [label="simple_stmt (=)"];
node37 [label="testlist_star_expr (decoded_string)"];
node38 [label="testlist_star_expr ()"];
node39 [label="NAME (hex_bytes)"];
node40 [label="trailers ()"];
node41 [label="trailer (. decode)"];
node42 [label="trailer ('ascii')"];
node43 [label="simple_stmt ()"];
node44 [label="NAME (print)"];
node45 [label="trailers (decoded_string)"];
node46 [label="classdef (class)"];
node47 [label="NAME (TestRemoveEscapeCharacters)"];
node48 [label="suite (def)"];
node49 [label="NAME (__init__)"];
node50 [label="parameters (self)"];
node51 [label="suite ()"];
node52 [label="expr_stmt (=)"];
node53 [label="testlist_star_expr ()"];
node54 [label="NAME (self)"];
node55 [label="trailers (. passed)"];
node56 [label="testlist_star_expr (0)"];
node57 [label="simple_stmt (=)"];
node58 [label="testlist_star_expr ()"];
node59 [label="NAME (self)"];
node60 [label="trailers (. failed)"];
node61 [label="testlist_star_expr (0)"];
node62 [label="funcdef (def)"];
node63 [label="NAME (assert_equal)"];
node64 [label="parameters ()"];
node65 [label="NAME (self)"];
node66 [label="NAME (actual)"];
node67 [label="NAME (expected)"];
node68 [label="suite (if)"];
node69 [label="test (==)"];
node70 [label="expr (actual)"];
node71 [label="expr (expected)"];
node72 [label="suite (+=)"];
node73 [label="testlist_star_expr ()"];
node74 [label="NAME (self)"];
node75 [label="trailers (. passed)"];
node76 [label="testlist (1)"];
node77 [label="else_stmt (else)"];
node78 [label="expr_stmt (+=)"];
node79 [label="testlist_star_expr ()"];
node80 [label="NAME (self)"];
node81 [label="trailers (. failed)"];
node82 [label="testlist (1)"];
node83 [label="simple_stmt ()"];
node84 [label="NAME (print)"];
node85 [label="trailers (f&quot;Test failed! Expected: {expected}, Actual: {actual}&quot;)"];
node86 [label="funcdef (def)"];
node87 [label="NAME (run_tests)"];
node88 [label="parameters (self)"];
node89 [label="suite ()"];
node90 [label="expr_stmt (=)"];
node91 [label="testlist_star_expr (input_string)"];
node92 [label="testlist_star_expr (r'Hello\nWorld!')"];
node93 [label="simple_stmt (=)"];
node94 [label="testlist_star_expr (expected_output)"];
node95 [label="testlist_star_expr ('Hello\nWorld!')"];
node96 [label="simple_stmt ()"];
node97 [label="NAME (self)"];
node98 [label="trailers ()"];
node99 [label="trailer (. assert_equal)"];
node100 [label="trailer ()"];
node101 [label="test ()"];
node102 [label="NAME (remove_escape_characters)"];
node103 [label="trailers (input_string)"];
node104 [label="test (expected_output)"];
node105 [label="simple_stmt (=)"];
node106 [label="testlist_star_expr (input_string)"];
node107 [label="testlist_star_expr (r'Hello World!')"];
node108 [label="simple_stmt (=)"];
node109 [label="testlist_star_expr (expected_output)"];
node110 [label="testlist_star_expr ('Hello World!')"];
node111 [label="simple_stmt ()"];
node112 [label="NAME (self)"];
node113 [label="trailers ()"];
node114 [label="trailer (. assert_equal)"];
node115 [label="trailer ()"];
node116 [label="test ()"];
node117 [label="NAME (remove_escape_characters)"];
node118 [label="trailers (input_string)"];
node119 [label="test (expected_output)"];
node120 [label="funcdef (def)"];
node121 [label="NAME (remove_escape_characters)"];
node122 [label="parameters (string)"];
node123 [label="suite ()"];
node124 [label="expr_stmt (&quot;&quot;&quot;
    Remove escape characters from a string.
    &quot;&quot;&quot;)"];
node125 [label="simple_stmt (return)"];
node126 [label="test ()"];
node127 [label="NAME (string)"];
node128 [label="trailers ()"];
node129 [label="trailer (. replace)"];
node130 [label="trailer ()"];
node131 [label="test ('\\')"];
node132 [label="test ('')"];
node133 [label="simple_stmt ()"];
node134 [label="NAME (TestRemoveEscapeCharacters)"];
node135 [label="trailers ()"];
node136 [label="trailer ( () )"];
node137 [label="trailer (. run_tests)"];
node138 [label="trailer ( () )"];

node1 -- node2;
node2 -- node3;
node3 -- node4;
node4 -- node5;
node5 -- node6;
node6 -- node7;
node7 -- node8;
node8 -- node9;
node9 -- node10;
node10 -- node11;
node11 -- node12;
node11 -- node13;
node10 -- node14;
node14 -- node15;
node14 -- node16;
node9 -- node17;
node17 -- node18;
node17 -- node19;
node17 -- node20;
node20 -- node21;
node20 -- node22;
node22 -- node23;
node22 -- node24;
node24 -- node25;
node24 -- node26;
node8 -- node27;
node27 -- node28;
node27 -- node29;
node7 -- node30;
node30 -- node31;
node30 -- node32;
node6 -- node33;
node33 -- node34;
node33 -- node35;
node5 -- node36;
node36 -- node37;
node36 -- node38;
node38 -- node39;
node38 -- node40;
node40 -- node41;
node40 -- node42;
node4 -- node43;
node43 -- node44;
node43 -- node45;
node3 -- node46;
node46 -- node47;
node46 -- node48;
node48 -- node49;
node48 -- node50;
node48 -- node51;
node51 -- node52;
node52 -- node53;
node53 -- node54;
node53 -- node55;
node52 -- node56;
node51 -- node57;
node57 -- node58;
node58 -- node59;
node58 -- node60;
node57 -- node61;
node48 -- node62;
node62 -- node63;
node62 -- node64;
node64 -- node65;
node64 -- node66;
node64 -- node67;
node62 -- node68;
node68 -- node69;
node69 -- node70;
node69 -- node71;
node68 -- node72;
node72 -- node73;
node73 -- node74;
node73 -- node75;
node72 -- node76;
node68 -- node77;
node77 -- node78;
node78 -- node79;
node79 -- node80;
node79 -- node81;
node78 -- node82;
node77 -- node83;
node83 -- node84;
node83 -- node85;
node48 -- node86;
node86 -- node87;
node86 -- node88;
node86 -- node89;
node89 -- node90;
node90 -- node91;
node90 -- node92;
node89 -- node93;
node93 -- node94;
node93 -- node95;
node89 -- node96;
node96 -- node97;
node96 -- node98;
node98 -- node99;
node98 -- node100;
node100 -- node101;
node101 -- node102;
node101 -- node103;
node100 -- node104;
node89 -- node105;
node105 -- node106;
node105 -- node107;
node89 -- node108;
node108 -- node109;
node108 -- node110;
node89 -- node111;
node111 -- node112;
node111 -- node113;
node113 -- node114;
node113 -- node115;
node115 -- node116;
node116 -- node117;
node116 -- node118;
node115 -- node119;
node2 -- node120;
node120 -- node121;
node120 -- node122;
node120 -- node123;
node123 -- node124;
node123 -- node125;
node125 -- node126;
node126 -- node127;
node126 -- node128;
node128 -- node129;
node128 -- node130;
node130 -- node131;
node130 -- node132;
node1 -- node133;
node133 -- node134;
node133 -- node135;
node135 -- node136;
node135 -- node137;
node135 -- node138;

}
