Graph {
node1 [label="continued_file_input ()"];
node2 [label="continued_file_input ()"];
node3 [label="continued_file_input ()"];
node4 [label="continued_file_input ()"];
node5 [label="continued_file_input ()"];
node6 [label="continued_file_input ()"];
node7 [label="continued_file_input (def$->)"];
node8 [label="NAME (add_numbers)"];
node9 [label="parameters ()"];
node10 [label="tfpdef (:)"];
node11 [label="NAME (a)"];
node12 [label="test (int)"];
node13 [label="tfpdef (:)"];
node14 [label="NAME (b)"];
node15 [label="test (int)"];
node16 [label="test (int)"];
node17 [label="suite ()"];
node18 [label="expr_stmt (&quot;&quot;&quot;
        Function to add two integers
    &quot;&quot;&quot;)"];
node19 [label="simple_stmt (return)"];
node20 [label="test (+)"];
node21 [label="term (a)"];
node22 [label="term (b)"];
node23 [label="funcdef (def$->)"];
node24 [label="NAME (square_elements)"];
node25 [label="parameters (:)"];
node26 [label="NAME (numbers)"];
node27 [label="test ()"];
node28 [label="NAME (List)"];
node29 [label="trailers (int)"];
node30 [label="test ()"];
node31 [label="NAME (List)"];
node32 [label="trailers (int)"];
node33 [label="suite ()"];
node34 [label="expr_stmt (&quot;&quot;&quot;
        Function to square every element present in a list
    &quot;&quot;&quot;)"];
node35 [label="simple_stmt (=)"];
node36 [label="testlist_star_expr (squared)"];
node37 [label="testlist_star_expr ( [] )"];
node38 [label="test (**)"];
node39 [label="atom_expr (num)"];
node40 [label="atom_expr (2)"];
node41 [label="comp_for (for$in)"];
node42 [label="exprlist (num)"];
node43 [label="or_test (numbers)"];
node44 [label="simple_stmt (return)"];
node45 [label="test (squared)"];
node46 [label="funcdef (def$->)"];
node47 [label="NAME (is_positive_or_zero)"];
node48 [label="parameters (:)"];
node49 [label="NAME (num)"];
node50 [label="test (int)"];
node51 [label="test (str)"];
node52 [label="suite ()"];
node53 [label="expr_stmt (&quot;&quot;&quot;
        Function to check if a number is positive or not
    &quot;&quot;&quot;)"];
node54 [label="if_stmt (if)"];
node55 [label="test (>)"];
node56 [label="expr (num)"];
node57 [label="expr (0)"];
node58 [label="suite (return)"];
node59 [label="test (&quot;Positive&quot;)"];
node60 [label="elif_stmt (elif)"];
node61 [label="test (==)"];
node62 [label="expr (num)"];
node63 [label="expr (0)"];
node64 [label="suite (return)"];
node65 [label="test (&quot;Zero&quot;)"];
node66 [label="else_stmt (else)"];
node67 [label="return_stmt (return)"];
node68 [label="test (&quot;Negative&quot;)"];
node69 [label="classdef (class)"];
node70 [label="NAME (Animal)"];
node71 [label="suite (def)"];
node72 [label="NAME (__init__)"];
node73 [label="parameters ()"];
node74 [label="NAME (self)"];
node75 [label="tfpdef (:)"];
node76 [label="NAME (name)"];
node77 [label="test (str)"];
node78 [label="suite (=)"];
node79 [label="testlist_star_expr ()"];
node80 [label="NAME (self)"];
node81 [label="trailers (. name)"];
node82 [label="testlist_star_expr (name)"];
node83 [label="funcdef (def$->)"];
node84 [label="NAME (make_sound)"];
node85 [label="parameters (self)"];
node86 [label="test (str)"];
node87 [label="suite (return)"];
node88 [label="test (&quot;Some generic animal sound&quot;)"];
node89 [label="classdef (class)"];
node90 [label="NAME (Dog)"];
node91 [label="arglist (Animal)"];
node92 [label="suite (def$->)"];
node93 [label="NAME (make_sound)"];
node94 [label="parameters (self)"];
node95 [label="test (str)"];
node96 [label="suite (return)"];
node97 [label="test (&quot;Woof!&quot;)"];
node98 [label="funcdef (def)"];
node99 [label="NAME (main)"];
node100 [label="parameters ( () )"];
node101 [label="suite ()"];
node102 [label="expr_stmt (=)"];
node103 [label="testlist_star_expr (result)"];
node104 [label="testlist_star_expr ()"];
node105 [label="NAME (add_numbers)"];
node106 [label="trailers ()"];
node107 [label="test (5)"];
node108 [label="test (3)"];
node109 [label="simple_stmt ()"];
node110 [label="NAME (print)"];
node111 [label="trailers ()"];
node112 [label="test (&quot;Result:&quot;)"];
node113 [label="test (result)"];
node114 [label="simple_stmt (=)"];
node115 [label="testlist_star_expr (numbers)"];
node116 [label="testlist_star_expr ( [] )"];
node117 [label="test (1)"];
node118 [label="test (2)"];
node119 [label="test (3)"];
node120 [label="test (4)"];
node121 [label="simple_stmt (=)"];
node122 [label="testlist_star_expr (squared_numbers)"];
node123 [label="testlist_star_expr ()"];
node124 [label="NAME (square_elements)"];
node125 [label="trailers (numbers)"];
node126 [label="simple_stmt ()"];
node127 [label="NAME (print)"];
node128 [label="trailers ()"];
node129 [label="test (&quot;Squared Numbers:&quot;)"];
node130 [label="test (squared_numbers)"];
node131 [label="simple_stmt (=)"];
node132 [label="testlist_star_expr (num_check)"];
node133 [label="testlist_star_expr ()"];
node134 [label="NAME (is_positive_or_zero)"];
node135 [label="trailers (-$7)"];
node136 [label="simple_stmt ()"];
node137 [label="NAME (print)"];
node138 [label="trailers ()"];
node139 [label="test (&quot;Number Check:&quot;)"];
node140 [label="test (num_check)"];
node141 [label="simple_stmt (=)"];
node142 [label="testlist_star_expr (my_dog)"];
node143 [label="testlist_star_expr ()"];
node144 [label="NAME (Dog)"];
node145 [label="trailers (&quot;Buddy&quot;)"];
node146 [label="simple_stmt ()"];
node147 [label="NAME (print)"];
node148 [label="trailers ()"];
node149 [label="test (&quot;Dog Name:&quot;)"];
node150 [label="test ()"];
node151 [label="NAME (my_dog)"];
node152 [label="trailers (. name)"];
node153 [label="simple_stmt ()"];
node154 [label="NAME (print)"];
node155 [label="trailers ()"];
node156 [label="test (&quot;Dog Sound:&quot;)"];
node157 [label="test ()"];
node158 [label="NAME (my_dog)"];
node159 [label="trailers ()"];
node160 [label="trailer (. make_sound)"];
node161 [label="trailer ( () )"];
node162 [label="if_stmt (if)"];
node163 [label="test (==)"];
node164 [label="expr (__name__)"];
node165 [label="expr (&quot;__main__&quot;)"];
node166 [label="suite ()"];
node167 [label="NAME (main)"];
node168 [label="trailers ( () )"];

node1 -- node2;
node2 -- node3;
node3 -- node4;
node4 -- node5;
node5 -- node6;
node6 -- node7;
node7 -- node8;
node7 -- node9;
node9 -- node10;
node10 -- node11;
node10 -- node12;
node9 -- node13;
node13 -- node14;
node13 -- node15;
node7 -- node16;
node7 -- node17;
node17 -- node18;
node17 -- node19;
node19 -- node20;
node20 -- node21;
node20 -- node22;
node6 -- node23;
node23 -- node24;
node23 -- node25;
node25 -- node26;
node25 -- node27;
node27 -- node28;
node27 -- node29;
node23 -- node30;
node30 -- node31;
node30 -- node32;
node23 -- node33;
node33 -- node34;
node33 -- node35;
node35 -- node36;
node35 -- node37;
node37 -- node38;
node38 -- node39;
node38 -- node40;
node37 -- node41;
node41 -- node42;
node41 -- node43;
node33 -- node44;
node44 -- node45;
node5 -- node46;
node46 -- node47;
node46 -- node48;
node48 -- node49;
node48 -- node50;
node46 -- node51;
node46 -- node52;
node52 -- node53;
node52 -- node54;
node54 -- node55;
node55 -- node56;
node55 -- node57;
node54 -- node58;
node58 -- node59;
node54 -- node60;
node60 -- node61;
node61 -- node62;
node61 -- node63;
node60 -- node64;
node64 -- node65;
node54 -- node66;
node66 -- node67;
node67 -- node68;
node4 -- node69;
node69 -- node70;
node69 -- node71;
node71 -- node72;
node71 -- node73;
node73 -- node74;
node73 -- node75;
node75 -- node76;
node75 -- node77;
node71 -- node78;
node78 -- node79;
node79 -- node80;
node79 -- node81;
node78 -- node82;
node71 -- node83;
node83 -- node84;
node83 -- node85;
node83 -- node86;
node83 -- node87;
node87 -- node88;
node3 -- node89;
node89 -- node90;
node89 -- node91;
node89 -- node92;
node92 -- node93;
node92 -- node94;
node92 -- node95;
node92 -- node96;
node96 -- node97;
node2 -- node98;
node98 -- node99;
node98 -- node100;
node98 -- node101;
node101 -- node102;
node102 -- node103;
node102 -- node104;
node104 -- node105;
node104 -- node106;
node106 -- node107;
node106 -- node108;
node101 -- node109;
node109 -- node110;
node109 -- node111;
node111 -- node112;
node111 -- node113;
node101 -- node114;
node114 -- node115;
node114 -- node116;
node116 -- node117;
node116 -- node118;
node116 -- node119;
node116 -- node120;
node101 -- node121;
node121 -- node122;
node121 -- node123;
node123 -- node124;
node123 -- node125;
node101 -- node126;
node126 -- node127;
node126 -- node128;
node128 -- node129;
node128 -- node130;
node101 -- node131;
node131 -- node132;
node131 -- node133;
node133 -- node134;
node133 -- node135;
node101 -- node136;
node136 -- node137;
node136 -- node138;
node138 -- node139;
node138 -- node140;
node101 -- node141;
node141 -- node142;
node141 -- node143;
node143 -- node144;
node143 -- node145;
node101 -- node146;
node146 -- node147;
node146 -- node148;
node148 -- node149;
node148 -- node150;
node150 -- node151;
node150 -- node152;
node101 -- node153;
node153 -- node154;
node153 -- node155;
node155 -- node156;
node155 -- node157;
node157 -- node158;
node157 -- node159;
node159 -- node160;
node159 -- node161;
node1 -- node162;
node162 -- node163;
node163 -- node164;
node163 -- node165;
node162 -- node166;
node166 -- node167;
node166 -- node168;

}
