#################### MILESTONE2 ######################

############ SYMBOL TABLES ###############

Assumptions:

1) The type of a variable will remain the same within a scope. [Mentioned in Piazza]

2) I have assumed lists will be of primitive data types only.

3) Symbol table not yet implemented for classes

4) Not sure how to get the size of different variables

5) All class attributes and members assumed to be public. [Mentioned in Piazza]

6) string type will be given, extra variable to store column of declaration will be given


------------------------------------------------ "DOUBTS IN MILESTONE 2" --------------------------------------------

1) How to manage function calls with default values of parameters?

2) Can classes have same name in inherited scopes?

3) Starting portion of 3AC generating too many "goto end".

4) In "continued_file_input.2", do we need to create a new label?

5) function overloading for only different return type not supported

6) Have not supported the following cases in my "3AC Lexer" :
    -> *x = -y

7) Have not supported more than 6 arguments in function for x86_64

8) LOGICAL AND AND LOGICAL OR not yet supported in x86_64 generation

9) leave and ret being printed even in cases where it should be just ret

10) BIN_POWER not supported yet

11) UNARY_NOT not supported yet

---------------------------------------------------------- "IGNORE SECTION" ----------------------------------------------------------

// class RunTimeEnv {
// private:
//   stack<ActivationRecord> controlStack;             // holds the activation frames
//   int stackPtr;                                     // points to the top of the stack, stored in %rsp
//   int basePtr;                                      // used as a reference to access local variables etc., usually stored in %rbp
//   int instrPtr;                                     // points to the address of the next instruction, stored in %rip
//   int rvInt;                                        // integer return value from function, stored in %rax
//   float rvFloat;                                    // float return value, stored in usually %xmm0-%xmm1

// public:
//   // Constructor
//   RunTimeEnv(int stackPtr = 0x100000, int basePtr = 0x100000, int instrPtr = 0x0, int rvInt = 0, int rvFloat = 0.0) {
//       this->stackPtr = stackPtr;
//       this->basePtr = basePtr;
//       this->instrPtr = instrPtr;
//       this->rvInt = rvInt;
//       this->rvFloat = rvFloat;
//   }

//   // function call
//   void callFunction(vector<int> intParams, vector<float> floatParams, int returnAddr, int funcAddr);

//   // function setup
//   void setUpFunction();

//   // saving callee-saved registers
//   void saveRegs(vector<int> savedVarInt, vector<float> savedVarFloat);

//   // function cleanup
//   void cleanupFunction(int rvInt = 0, float rvFloat = 0.0);

// };


// void RunTimeEnv::callFunction(vector<int> intParams, vector<float> floatParams, int returnAddr, int funcAddr) {
//     // first create a new activation record frame
//     ActivationRecord ar;

//     // push params and return address
//     ar.intParams = intParams;
//     ar.floatParams = floatParams;
//     ar.returnAddr = returnAddr;

//     // set the stack pointer to the return address (top of the frame)
//     Env->stackPtr = returnAddr;

//     // set the instruction pointer
//     Env->instrPtr = funcAddr;

//     // push the activation record frame onto the stack
//     Env->controlStack.push(ar);

// }

// void RunTimeEnv::setUpFunction() {
//     // get the activation frame at the top
//     ActivationRecord* ar = &Env->controlStack.top();

//     // save the current base pointer
//     ar->prevBasePointer = Env->basePtr;

//     // set the current base pointer
//     Env->basePtr = Env->stackPtr;
// }

// void RunTimeEnv::saveRegs(vector<int> savedVarInt, vector<float> savedVarFloat) {
//     // get the activation frame at the top
//     ActivationRecord* ar = &Env->controlStack.top();

//     ar->savedVarInt = savedVarInt;
//     ar->savedVarFloat = savedVarFloat;
// }

// void RunTimeEnv::cleanupFunction(int rvInt, float rvFloat) {
//     // get the activation frame at the top
//     ActivationRecord* ar = &Env->controlStack.top();

//     // save the return values
//     Env->rvInt = rvInt;
//     Env->rvFloat = rvFloat;

//     // yet to complete
// }

---------------------------------------------------------- "IGNORE SECTION" ----------------------------------------------------------


Register Allocation:

0) Se that registers are to be used for which task (heuristics)
1) Keep note of the used registers and also the variables they are storing.
2) In case of collision (where it is not possible to allocate a register without freeing one)
     -> Fix a register allocation and deallocation scheme
     -> Code generation for the case of spilling of registers and allocation of new ones.
3) Implement a function -
     - update() => To inform allocation algorithm that all local variables should be copied on stack (especially when a function is called)
     - flush() => When a function block finishes - Information about local variables in no more useful so remove them